package cpw.mods.fml.client;

import com.google.common.base.Strings;
import cpw.mods.fml.common.Loader;
import cpw.mods.fml.common.ModContainer;
import java.awt.Dimension;
import java.util.ArrayList;
import net.minecraft.client.Minecraft;
import net.minecraft.client.font.TextRenderer;
import net.minecraft.client.gui.screen.Screen;
import net.minecraft.client.gui.widget.ButtonWidget;
import net.minecraft.client.gui.widget.OptionButtonWidget;
import net.minecraft.client.render.Tessellator;
import net.minecraft.util.Language;
import org.lwjgl.opengl.GL11;

public class GuiModList extends Screen {
    private Screen mainMenu;
    private GuiSlotModList modList;
    private int selected = -1;
    private ModContainer selectedMod;
    private int listWidth;
    private ArrayList<ModContainer> mods;

    public GuiModList(Screen mainMenu) {
        this.mainMenu = mainMenu;
        this.mods = new ArrayList();
        FMLClientHandler.instance().addSpecialModEntries(this.mods);

        for(ModContainer mod : Loader.instance().getModList()) {
            if (mod.getMetadata() != null && !Strings.isNullOrEmpty(mod.getMetadata().parent)) {
                String parentMod = mod.getMetadata().parent;
                ModContainer parentContainer = (ModContainer)Loader.instance().getIndexedModList().get(parentMod);
                if (parentContainer != null) {
                    mod.getMetadata().parentMod = parentContainer;
                    parentContainer.getMetadata().childMods.add(mod);
                    continue;
                }
            }

            this.mods.add(mod);
        }

    }

    public void init() {
        for(ModContainer mod : this.mods) {
            this.listWidth = Math.max(this.listWidth, this.getFontRenderer().getStringWidth(mod.getName()) + 10);
            this.listWidth = Math.max(this.listWidth, this.getFontRenderer().getStringWidth(mod.getVersion()) + 10);
        }

        this.listWidth = Math.min(this.listWidth, 150);
        Language translations = Language.getInstance();
        this.buttons.add(new OptionButtonWidget(6, this.width / 2 - 75, this.height - 38, translations.translate("gui.done")));
        this.modList = new GuiSlotModList(this, this.mods, this.listWidth);
        this.modList.registerScrollButtons(this.buttons, 7, 8);
    }

    protected void buttonClicked(ButtonWidget button) {
        if (button.active) {
            switch(button.id) {
                case 6:
                    this.field_1229.openScreen(this.mainMenu);
                    return;
            }
        }

        super.buttonClicked(button);
    }

    public int drawLine(String line, int offset, int shifty) {
        this.textRenderer.method_4247(line, offset, shifty, 14151146);
        return shifty + 10;
    }

    public void render(int p_571_1_, int p_571_2_, float p_571_3_) {
        this.modList.drawScreen(p_571_1_, p_571_2_, p_571_3_);
        this.drawCenteredString(this.textRenderer, "Mod List", this.width / 2, 16, 16777215);
        int offset = this.listWidth + 20;
        if (this.selectedMod != null) {
            GL11.glEnable(3042);
            if (!this.selectedMod.getMetadata().autogenerated) {
                int shifty = 35;
                if (!this.selectedMod.getMetadata().logoFile.isEmpty()) {
                    int texture = this.field_1229.field_3813.getTextureFromPath(this.selectedMod.getMetadata().logoFile);
                    GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
                    this.field_1229.field_3813.method_1426(texture);
                    Dimension dim = TextureFXManager.instance().getTextureDimensions(texture);
                    int top = 32;
                    Tessellator tess = Tessellator.INSTANCE;
                    tess.method_1405();
                    tess.method_1399((double)offset, (double)(top + dim.height), (double)this.zOffset, 0.0, 1.0);
                    tess.method_1399((double)(offset + dim.width), (double)(top + dim.height), (double)this.zOffset, 1.0, 1.0);
                    tess.method_1399((double)(offset + dim.width), (double)top, (double)this.zOffset, 1.0, 0.0);
                    tess.method_1399((double)offset, (double)top, (double)this.zOffset, 0.0, 0.0);
                    tess.method_1396();
                    shifty += 65;
                }

                this.textRenderer.method_956(this.selectedMod.getMetadata().name, offset, shifty, 16777215);
                shifty += 12;
                shifty = this.drawLine(String.format("Version: %s (%s)", this.selectedMod.getDisplayVersion(), this.selectedMod.getVersion()), offset, shifty);
                shifty = this.drawLine(String.format("Mod State: %s", Loader.instance().getModState(this.selectedMod)), offset, shifty);
                if (!this.selectedMod.getMetadata().credits.isEmpty()) {
                    shifty = this.drawLine(String.format("Credits: %s", this.selectedMod.getMetadata().credits), offset, shifty);
                }

                shifty = this.drawLine(String.format("Authors: %s", this.selectedMod.getMetadata().getAuthorList()), offset, shifty);
                shifty = this.drawLine(String.format("URL: %s", this.selectedMod.getMetadata().url), offset, shifty);
                shifty = this.drawLine(
                        this.selectedMod.getMetadata().childMods.isEmpty()
                                ? "No child mods for this mod"
                                : String.format("Child mods: %s", this.selectedMod.getMetadata().getChildModList()),
                        offset,
                        shifty
                );
                this.getFontRenderer().drawTrimmed(this.selectedMod.getMetadata().description, offset, shifty + 10, this.width - offset - 20, 14540253);
            } else {
                offset = (this.listWidth + this.width) / 2;
                this.drawCenteredString(this.textRenderer, this.selectedMod.getName(), offset, 35, 16777215);
                this.drawCenteredString(this.textRenderer, String.format("Version: %s", this.selectedMod.getVersion()), offset, 45, 16777215);
                this.drawCenteredString(
                        this.textRenderer, String.format("Mod State: %s", Loader.instance().getModState(this.selectedMod)), offset, 55, 16777215
                );
                this.drawCenteredString(this.textRenderer, "No mod information found", offset, 65, 14540253);
                this.drawCenteredString(this.textRenderer, "Ask your mod author to provide a mod mcmod.info file", offset, 75, 14540253);
            }

            GL11.glDisable(3042);
        }

        super.render(p_571_1_, p_571_2_, p_571_3_);
    }

    Minecraft getMinecraftInstance() {
        return this.field_1229;
    }

    TextRenderer getFontRenderer() {
        return this.textRenderer;
    }

    public void selectModIndex(int var1) {
        this.selected = var1;
        if (var1 >= 0 && var1 <= this.mods.size()) {
            this.selectedMod = (ModContainer)this.mods.get(this.selected);
        } else {
            this.selectedMod = null;
        }

    }

    public boolean modIndexSelected(int var1) {
        return var1 == this.selected;
    }
}
